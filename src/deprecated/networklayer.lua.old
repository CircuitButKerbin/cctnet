--[[
require ("networkd.modem")
Strict = {
    ---@param e any
    ---@return number
    tonumber = function (e)
        assert(tonumber(e) ~= nil, "Expected number, got " .. type(e) .. "\n" .. debug.traceback())
        -- This is fine since if it's not a number, it will throw an error beforehand
        ---@diagnostic disable-next-line 
        return tonumber(e)
    end,
    ---@param e any
    ---@param b number
    ---@return number
    tonumberbase = function (e,b)
        assert(tonumber(e,b) ~= nil, "Expected number, got " .. type(e) .. "\n" .. debug.traceback())
        return tonumber(e,b)
    end
}

---@class bit32
---@field band fun(a: number , b: number): number
---@field bor fun(a: number, b: number): number
---@field bxor fun(a: number, b: number): number
---@field bnot fun(a: number): number
---@field rshift fun(a: number, b: number): number
---@field lshift fun(a: number, b: number): number
---@diagnostic disable-next-line
bit32 = bit32;

Modem:new()
---@enum IPv4Protocol
IPv4Protocol = {
    ICMP =   1, -- Internet Control Message Protocol
    IGMP =   2, -- Internet Group Management Protocol
    TCP =    6, -- Transmission Control Protocol
    UDP =   17, -- User Datagram Protocol
    ENCAP = 41, -- IPv6 encapsulation
    OSPF =  89, -- Open Shortest Path First
    SCTP = 132,  -- Stream Control Transmission Protocol
}

---@enum ICMPType
ICMPType = {
    EchoReply = 0,
    DestinationUnreachable = 3,
    SourceQuench = 4,
    Redirect = 5,
    EchoRequest = 8,
    RouterAdvertisement = 9,
    RouterSolicitation = 10,
    TimeExceeded = 11,
    ParameterProblem = 12,
    TimestampRequest = 13,
    TimestampReply = 14,
    InformationRequest = 15,
    InformationReply = 16,
    AddressMaskRequest = 17,
    AddressMaskReply = 18,
}
---@class ICMPCode
ICMPCode = {
    DestinationUnreachable = {
        NetUnreachable = 0,
        HostUnreachable = 1,
        ProtocolUnreachable = 2,
        PortUnreachable = 3,
        FragmentationNeeded = 4,
        SourceRouteFailed = 5,
        DestinationNetworkUnknown = 6,
        DestinationHostUnknown = 7,
        SourceHostIsolated = 8,
        NetworkAdministrativelyProhibited = 9,
        HostAdministrativelyProhibited = 10,
        NetworkUnreachableForTOS = 11,
        HostUnreachableForTOS = 12,
        CommunicationAdministrativelyProhibited = 13,
        HostPrecedenceViolation = 14,
        PrecedenceCutoffInEffect = 15,
    },
    Redirect = {
        RedirectDatagramForTheNetwork = 0,
        RedirectDatagramForTheHost = 1,
        RedirectDatagramForTheTOSAndNetwork = 2,
        RedirectDatagramForTheTOSAndHost = 3,
    },
    TimeExceeded = {
        TTLExpiredInTransit = 0,
        FragmentReassemblyTimeExceeded = 1,
    },
    ParameterProblem = {
        PointerIndicatesTheError = 0,
        MissingARequiredOption = 1,
        BadLength = 2,
    }
}


---@class UDPPacket
---@field sourcePort number
---@field destinationPort number

UDP = {
    ---Creates a new UDP packet
    ---@param sourcePort number
    ---@param destinationPort number
    ---@param data any | DHCPMessage
    ---@return UDPPacket
    new = function (sourcePort, destinationPort, data)
        return {
            sourcePort = sourcePort,
            destinationPort = destinationPort,
            data = data
        }
    end,
}

---@enum TCPFlags
TCPFlags = {
    FIN = 0x01, -- Finish
    SYN = 0x02, -- Synchronize
    RST = 0x04, -- Reset
    PSH = 0x08, -- Push
    ACK = 0x10, -- Acknowledge
    URG = 0x20, -- Urgent (not used in Minecraft)
    ECE = 0x40, -- ECN Echo
    CWR = 0x80, -- Congestion Window Reduced
}

---@class TCPPacket
---@field sourcePort number
---@field destinationPort number
---@field flags number
---@field sequenceNumber number
---@field acknowledgmentNumber number
---@field data any

TCP = {
    ---Creates a new TCP packet
    ---@param sourcePort number
    ---@param destinationPort number
    ---@param flags number
    ---@param sequenceNumber number
    ---@param acknowledgmentNumber number
    ---@param data any
    ---@return TCPPacket
    new = function (sourcePort, destinationPort, flags, sequenceNumber, acknowledgmentNumber, data)
        return {
            sourcePort = sourcePort,
            destinationPort = destinationPort,
            flags = flags,
            sequenceNumber = sequenceNumber,
            acknowledgmentNumber = acknowledgmentNumber,
            data = data
        }
    end,
}

---@class ICMPPacket
---@field Type ICMPType
---@field code ICMPCode | integer
---@field data any 

ICMP = {
    ---@param self ICMPPacket
    isError = function (self)
        return self.Type == ICMPType.DestinationUnreachable or self.Type == ICMPType.SourceQuench or self.Type == ICMPType.Redirect or self.Type == ICMPType.TimeExceeded or self.Type == ICMPType.ParameterProblem
    end,
    ---@param Type ICMPType
    ---@param code ICMPCode | integer
    ---@param data any
    ---@return ICMPPacket
    new = function (Type, code, data)
        return {
            Type = Type,
            code = code,
            data = data
        }
    end,
}


---@class IPv4Packet
---@field source IPv4Address
---@field destination IPv4Address
---@field timeToLive number
---@field protocol IPv4Protocol
---@field data TCPPacket | UDPPacket | ICMPPacket

IPv4 = {
    ---Converts an string into an IPv4 address
    ---@return IPv4Address
    addressFromString = function (address)
        local ipart = string.gmatch(address, "[^%.]+")
        local parts = {}
        for i in ipart do
            parts[#parts+1] = i
        end
        assert(#parts == 4, "Invalid IP Specified: " .. address)
        local ipint = 0
        for i=1, #parts do
            ipint = ipint + bit32.lshift(Strict.tonumber(parts[i]), (3-(i-1))*8)
        end
        return ipint
    end,
    ---Converts an IPv4 address into a string
    ---@return string
    ---@param address IPv4Address
    addressToString = function (address)
        local parts = {}
        for i=1, 4 do
            parts[i] = bit32.rshift(bit32.band(address, bit32.lshift(0xFF, (3-(i-1))*8)), (3-(i-1))*8)
        end
        return table.concat(parts, ".")
    end,
    ---Creates a new IPv4 packet
    ---@param source IPv4Address
    ---@param destination IPv4Address
    ---@param timeToLive number
    ---@param protocol IPv4Protocol
    ---@param data TCPPacket | UDPPacket | ICMPPacket
    ---@return IPv4Packet
    new = function (source, destination, timeToLive, protocol, data)
        return {
            source = source,
            destination = destination,
            timeToLive = timeToLive,
            protocol = protocol,
            data = data
        }
    end,
}

---@class ARPPacket
---@field sourceIPv4 IPv4Address
---@field sourceMAC MACAddress
---@field targetIPv4 IPv4Address
---@field targetMAC MACAddress
---@field operation number

---@enum ARPOperation
ARPOperation = {
    Request = 1,
    Reply = 2,
}

ARP = {
    ---Creates a new ARP packet
    ---@param sourceIPv4 IPv4Address
    ---@param sourceMAC MACAddress
    ---@param targetIPv4 IPv4Address
    ---@param targetMAC MACAddress
    ---@param operation ARPOperation
    ---@return ARPPacket
    new = function (sourceIPv4, sourceMAC, targetIPv4, targetMAC, operation)
        return {
            sourceIPv4 = sourceIPv4,
            sourceMAC = sourceMAC,
            destinationIPv4 = targetIPv4,
            destinationMAC = targetMAC,
            operation = operation
        }
    end,
}

---@enum EthernetType
EthernetType = {
    IPv4 = 0x0800,
    ARP = 0x0806,
}

---@class EthernetIIFrame
EthernetII = {
    ---Creates a new Ethernet II frame
    ---@param sourceMAC MACAddress
    ---@param destinationMAC MACAddress
    ---@param Type EthernetType
    ---@param data IPv4Packet | ARPPacket
    ---@return EthernetIIFrame
    new = function (self, sourceMAC, destinationMAC, Type, data)
        local o = self
        o.sourceMAC = sourceMAC
        o.destinationMAC = destinationMAC
        o.Type = Type
        o.data = data
        return o;
    end,
    send = function (frame)
        if frame.Type == EthernetType.IPv4 then
            if frame.data.protocol == IPv4Protocol.ICMP then
                Modem:transmit(7, 7, frame)
                return
            end
            if frame.data.protocol == IPv4Protocol.UDP or frame.data.protocol == IPv4Protocol.TCP then
                ---@type UDPPacket | TCPPacket
                Modem:transmit(frame.data.data.destinationPort, frame.data.data.sourcePort, frame)
                return
            end
        elseif frame.Type == EthernetType.ARP then
            Modem:transmit(1, 1, frame)
            return
        end
    end,
    ---The source MAC address of the frame
    ---@type MACAddress
    sourceMAC = 0,
    ---The destination MAC address of the frame
    ---@type MACAddress
    destinationMAC = 0,
    ---The type of the frame
    ---@type EthernetType
    Type = nil;
    ---The data of the frame
    ---@type IPv4Packet | ARPPacket
    data = nil;
}
---@enum DHCPMessageType
DHCPMessageType = {
    Discover = 1,
    Offer = 2,
    Request = 3,
    Decline = 4,
    Ack = 5,
    Nak = 6,
    Release = 7,
    Inform = 8,
}

---@enum DHCPOptions
DHCPOptions = {
    SubnetMask = 1,
    TimeOffset = 2,
    Gateway = 3,
    TimeServer = 4,
    DomainNameServer = 6,
    LogServer = 7,
    HostName = 12,
    DomainName = 15,
    LeaseTime = 51,
    RequestedIP = 50,
    Server = 54,
}

IPUtil = {
    --convert an IP string (xxx.xxx.xxx.xxx) into the int
    ---@deprecated Use IPv4.addressFromString
    strtoaddr = function (ip)
        local ipart = string.gmatch(ip, "[^%.]+")
        local parts = {}
        for i in ipart do
            parts[#parts+1] = i
        end
        assert(#parts == 4, "Invalid IP Specified: " .. ip)
        local ipint = 0
        for i=1, #parts do
            ipint = ipint + bit32.lshift(Strict.tonumber(parts[i]), (3-(i-1))*8)
        end
        return ipint
    end,
    ---@deprecated Use IPv4.addressToString
    addrtostr = function (ip)
        local parts = {}
        for i=1, 4 do
            parts[i] = bit32.rshift(bit32.band(ip, bit32.lshift(0xFF, (3-(i-1))*8)), (3-(i-1))*8)
        end
        return table.concat(parts, ".")
    end
}


---@class DHCPMessage
---@field messageType DHCPMessageType
---@field transactionID number
---@field clientIP IPv4Address
---@field yourIP IPv4Address
---@field serverIP IPv4Address
---@field gatewayIP IPv4Address
---@field clientMAC MACAddress
---@field options table<any>


NetworkDebug = {
    frameTypeToString = {
        [EthernetType.IPv4] = "IPv4",
        [EthernetType.ARP] = "ARP",
    },
    protocolToString = {
        [IPv4Protocol.ICMP] = "ICMP",
        [IPv4Protocol.IGMP] = "IGMP",
        [IPv4Protocol.TCP] = "TCP",
        [IPv4Protocol.UDP] = "UDP",
        [IPv4Protocol.ENCAP] = "ENCAP",
        [IPv4Protocol.OSPF] = "OSPF",
        [IPv4Protocol.SCTP] = "SCTP",
    },
    dchpTypeToString = {
        [DHCPMessageType.Discover] = "Discover",
        [DHCPMessageType.Offer] = "Offer",
        [DHCPMessageType.Request] = "Request",
        [DHCPMessageType.Decline] = "Decline",
        [DHCPMessageType.Ack] = "Ack",
        [DHCPMessageType.Nak] = "Nak",
        [DHCPMessageType.Release] = "Release",
        [DHCPMessageType.Inform] = "Inform",
    },
    icmpTypeToString = {
        [ICMPType.EchoReply] = "EchoReply",
        [ICMPType.DestinationUnreachable] = "DestinationUnreachable",
        [ICMPType.SourceQuench] = "SourceQuench",
        [ICMPType.Redirect] = "Redirect",
        [ICMPType.EchoRequest] = "EchoRequest",
        [ICMPType.RouterAdvertisement] = "RouterAdvertisement",
        [ICMPType.RouterSolicitation] = "RouterSolicitation",
        [ICMPType.TimeExceeded] = "TimeExceeded",
        [ICMPType.ParameterProblem] = "ParameterProblem",
        [ICMPType.TimestampRequest] = "TimestampRequest",
        [ICMPType.TimestampReply] = "TimestampReply",
        [ICMPType.InformationRequest] = "InformationRequest",
        [ICMPType.InformationReply] = "InformationReply",
        [ICMPType.AddressMaskRequest] = "AddressMaskRequest",
        [ICMPType.AddressMaskReply] = "AddressMaskReply",
    },
    ---@param ip IPv4Address
    ---@return string Human readable IP address
    ipToString = function (ip)
        return IPv4.addressToString(ip)
    end,
    ---@param mac MACAddress
    ---@return string Human readable MAC address
    macToString = function (mac)
        local macstr = string.format("%012X", mac)
        assert(#macstr == 12, "Invalid MAC Address: " .. macstr)
        local parts = {}
        for i=1, 6 do
            parts[i] = string.sub(macstr, (i-1)*2+1, (i-1)*2+2)
        end
        return table.concat(parts, ":")
    end,
    ---@param frame EthernetIIFrame
    prettyPrintFrame = function (frame)
        print("EthernetIIFrame {")
        print("\tsourceMAC = " .. NetworkDebug.macToString(frame.sourceMAC))
        print("\tdestinationMAC = " .. NetworkDebug.macToString(frame.destinationMAC))
        print("\tType = " .. (NetworkDebug.frameTypeToString[frame.Type] or "Unknown"))
        if frame.Type == EthernetType.IPv4 then
            print("\tIPv4 = {")
            print("\t\tsource = " .. NetworkDebug.ipToString(frame.data.source))
            print("\t\tdestination = " .. NetworkDebug.ipToString(frame.data.destination))
            print("\t\tprotocol = " .. (NetworkDebug.protocolToString[frame.data.protocol] or "Unknown"))
            if frame.data.protocol == IPv4Protocol.UDP then
                print("\t\tUDP = {")
                print("\t\t\tsourcePort = " .. frame.data.data.sourcePort)
                print("\t\t\tdestinationPort = " .. frame.data.data.destinationPort)
                if (frame.data.data.destinationPort == 67 and frame.data.data.sourcePort == 68) or (frame.data.data.destinationPort == 68 and frame.data.data.sourcePort == 67) then
                    if (frame.data.data.destinationPort == 67) then
                        print("\t\t\tDHCP (Client -> Server) = {")
                    else
                        print("\t\t\tDHCP (Server -> Client) = {")
                    end
                    print("\t\t\t\tmessageType = " .. (NetworkDebug.dchpTypeToString[frame.data.data.data.messageType] or "Unknown"))
                    print("\t\t\t\ttransactionID = " .. frame.data.data.data.transactionID)
                    print("\t\t\t\tyourIP = " .. NetworkDebug.ipToString(frame.data.data.data.yourIP))
                    print("\t\t\t\tserverIP = " .. NetworkDebug.ipToString(frame.data.data.data.serverIP))
                    print("\t\t\t\tgatewayIP = " .. NetworkDebug.ipToString(frame.data.data.data.gatewayIP))
                    print("\t\t\t\tclientIP = " .. NetworkDebug.ipToString(frame.data.data.data.clientIP))
                    print("\t\t\t\tclientMAC = " .. NetworkDebug.macToString(frame.data.data.data.clientMAC))
                    print("\t\t\t}")
                end
            end
            if frame.data.protocol == IPv4Protocol.TCP then
                print("\t\tTCP = {")
                print("\t\t\tsourcePort = " .. frame.data.data.sourcePort)
                print("\t\t\tdestinationPort = " .. frame.data.data.destinationPort)
                print("\t\t\tflags = " .. frame.data.data.flags)
                print("\t\t\tsequenceNumber = " .. frame.data.data.sequenceNumber)
                print("\t\t\tacknowledgmentNumber = " .. frame.data.data.acknowledgmentNumber)
                print("\t\t}")
            end
            if frame.data.protocol == IPv4Protocol.ICMP then
                print("\t\tICMP = {")
                print("\t\t\tType = " .. (NetworkDebug.icmpTypeToString[frame.data.data.Type] or "Unknown"))
                print("\t\t\tcode = " .. (frame.data.data.code or "nil"))
                print("\t\t}")
            end
            print("\t}")
        end
        if frame.Type == EthernetType.ARP then
            print("\tARP = {")
            print("\t\tsourceIPv4 = " .. NetworkDebug.ipToString(frame.data.sourceIPv4))
            print("\t\tsourceMAC = " .. NetworkDebug.macToString(frame.data.sourceMAC))
            print("\t\ttargetIPv4 = " .. NetworkDebug.ipToString(frame.data.targetIPv4))
            print("\t\ttargetMAC = " .. NetworkDebug.macToString(frame.data.targetMAC))
            print("\t\toperation = " .. frame.data.operation)
            print("\t}")
        end
        print("}")
    end
}
--]]